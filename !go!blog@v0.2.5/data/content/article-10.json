{"Id":10,"Title":"连续的子数组和","Slug":"12","Text":"# [523. 连续的子数组和](https://leetcode-cn.com/problems/continuous-subarray-sum/)\n\n- 该题考查的内容是前缀数组和\n\n- 使用sum遍历记录到第i个数的数组和为sum[i]\n\n- 则可以有sum[:i] = n\\*k+x1, sum[:j] = m\\*k+x2, 如果sum[:i]-sum[:j] = (n-m)\\*k，则存在子数组为k的倍数\n\n- go语言的代码如下\n\n  ```go\n  // 利用前缀和解法\n  // sum[:i] = n*k + x1\n  // sum[:j] = m*k + x2\n  // 如果x1和x2相等，则sum[:i] - sum[:j]是k的倍数\n  func checkSubarraySum(nums []int, k int) bool {\n      nlen := len(nums)\n  \n      mymap := map[int]int{}\n      sum := 0\n      mymap[0] = -1\n      for i := 0; i \u003c nlen; i++ {\n          sum += nums[i]\n          remainder := sum%k\n          if _, ok := mymap[remainder]; ok \u0026\u0026 i - mymap[remainder] \u003e 1 {\n              return true\n          } else if _, ok := mymap[remainder]; !ok {\n              mymap[remainder] = i\n          }\n      }\n      return false\n  }\n  ```\n\n  ","Tags":["连续的子数组和"],"CreateTime":1624551168,"EditTime":1624551168,"UpdateTime":1624551168,"IsComment":true,"IsLinked":false,"AuthorId":5,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":3}